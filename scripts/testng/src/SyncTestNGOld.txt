
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.AfterClass;
import org.testng.annotations.Test;
import org.w3c.dom.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Properties;

/**
 * Created by amichaim on 05/10/2014
 */
public class SyncTestNG {

	private String deviceUrl;
	private String pathToTestCases;
	String pathToSyncDesktopClientExe;
	String pathToLocalSyncDesktopFolder;
	String pathToDataFiles;

	private String rootFolder;
	@BeforeClass
	public void setup() {

		Properties props = new Properties();
		try {
			props.load(new FileInputStream("/Users/bob/Documents/Developer/Quickbuild/Test.properties"));
			deviceUrl = props.getProperty("deviceUrl");
			System.out.println("deviceUrl: "+deviceUrl);
			pathToTestCases = "testCases";
			//pathToDataFiles = System.getProperty("user.dir") + File.separator + "data";
		} catch (IOException e) {
			System.out.println("Cannot load Test.properties. Exit.");
			System.exit(1);
		}

		//callSetupOnDevice();


	}

	@AfterClass
	public void teardown() {
		//callTeardownOnDevice();
	}

	private void callSetupOnDevice() {
		rootFolder = sendHttpResponse("action=setupSyncTest").trim();
		System.out.println("Root folder created with name " + rootFolder);
	}

	private void callTeardownOnDevice() {
		String rootFolderDeletion = sendHttpResponse("action=teardownSyncTest");
		System.out.println(rootFolderDeletion);
	}

	@Test(priority=1, description = "GetToken test")
	public void testCase1() {testCase("GetToken/",SUCCESS);}
	
	@Test(priority=1, description = "GetToken with user&pass parameters")
	public void testCase2() {testCase("GetToken/?scope=usernamePassword&userName=a&password=a",SUCCESS);}

//	@Test(priority=1, description = "GetRessourcesTest")
//	public void testCase3() {testCase("GetRessources/?scope=usernamePassword&userName=a&password=b",SUCCESS);}
	
	public void testCase(String urlParameters, String expectedRes) {

		//        String testScriptPath = pathToTestCases + File.separator + "testCase" + index + ".cmd";
		//        if ((new File(testScriptPath)).exists()) {
		//
		//            System.out.println("Starting script testCase" + index + "...");
		//
		//            callCmd("\"" +testScriptPath + "\" \"" + pathToLocalSyncDesktopFolder + "\" \"" + rootFolder + "\" \"" + pathToDataFiles + "\"", true);
		//
		//            System.out.println("test case script ended");
		//
		//            runSyncDesktop(secondsToWait);
		//
		//            String syncOutput = runSyncOnDevice();
		//
		//            String goldXmlPath = pathToTestCases + File.separator + "gold_testCase" + index + ".xml";
		//            String compResult = compareXmls(goldXmlPath, syncOutput);
		//String res = sendHttpResponse("?testName=GetToken");
		String res = sendHttpResponse(urlParameters);
		System.out.println("device reply is: "+res);
		Assert.assertEquals(res, expectedRes, res );

		System.out.println("End testCase " + urlParameters);
	}

	private String sendHttpResponse(String urlParameters) {
		URL url;
		HttpURLConnection connection = null;
		try {

			//Create connection
			url = new URL(deviceUrl+urlParameters);
			connection = (HttpURLConnection)url.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Content-Type",
					"application/x-www-form-urlencoded");

			connection.setRequestProperty("Content-Length", "" +
					Integer.toString("".getBytes().length));
			connection.setRequestProperty("Content-Language", "en-US");

			connection.setUseCaches (false);
			connection.setDoInput(true);
			connection.setDoOutput(true);

			//Send request
			DataOutputStream wr = new DataOutputStream (
					connection.getOutputStream ());
			wr.writeBytes ("");
			wr.flush ();
			wr.close ();

			//Get Response
			InputStream is = connection.getInputStream();
			BufferedReader rd = new BufferedReader(new InputStreamReader(is));
			String line;
			StringBuffer response = new StringBuffer();
			while((line = rd.readLine()) != null) {
				response.append(line);
				response.append('\r');
			}
			rd.close();
			return response.toString();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {

			if(connection != null) {
				connection.disconnect();
			}
		}
	}

	private String compareXmls(String pathToXmlGoldFile, String xmlToCheck) {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		dbf.setNamespaceAware(true);
		dbf.setCoalescing(true);
		dbf.setIgnoringElementContentWhitespace(true);
		dbf.setIgnoringComments(true);
		try {
			DocumentBuilder db = dbf.newDocumentBuilder();

			Document doc1 = db.parse(new File(pathToXmlGoldFile));
			doc1.normalizeDocument();
			Element rootNodeGold = doc1.getDocumentElement();
			rootNodeGold.setAttribute("name", rootFolder);

			InputStream stream = new ByteArrayInputStream(xmlToCheck.getBytes(StandardCharsets.UTF_8));
			Document doc2 = db.parse(stream);
			doc2.normalizeDocument();

			Node rootNodeToCheck = null;
			NodeList desktopFirstLevelChilds = doc2.getDocumentElement().getFirstChild().getFirstChild().getChildNodes();
			for (int i = 0; i < desktopFirstLevelChilds.getLength(); i++) {
				Node child = desktopFirstLevelChilds.item(i);
				NamedNodeMap attributes = child.getAttributes();
				for (int j = 0; j < attributes.getLength(); j++) {
					Node att = attributes.item(j);
					if (att.getNodeName().equals("name") && att.getNodeValue().equals(rootFolder)) {
						rootNodeToCheck = child;
						break;
					}
				}
				if (rootNodeToCheck != null) {
					break;
				}
			}

			if (rootNodeToCheck == null) {
				return "Cannot find root node";
			}

			try {
				DOMUtils.compareNodes(rootNodeGold, rootNodeToCheck);
			}
			catch (Exception e) {
				return e.getMessage() + "\nGold path:" + pathToXmlGoldFile + "\nXml got:\n" + xmlToCheck;
			}
			return SUCCESS;

			//return doc1.isEqualNode(doc2);
		}
		catch (Exception e) {
			return "Exception when compare XMLs: " + e.getMessage();
		}

	}

	private static final String SUCCESS = "Success \r";

	/*private boolean comp(String pathToXmlGoldFile, String xmlToCheck) {
        XmlUtils xmlUtils = new XmlUtils();

        try
        {
            //Parse the two input files
            DocumentBuilderFactory dbFactory =
                    DocumentBuilderFactory.newInstance();
            dbFactory.setNamespaceAware(true);
            DocumentBuilder docBuilder =
                    dbFactory.newDocumentBuilder();
            Node doc = docBuilder.parse(new File(pathToXmlGoldFile));
            InputStream stream = new ByteArrayInputStream(xmlToCheck.getBytes(StandardCharsets.UTF_8));
            Node doc1 = docBuilder.parse(stream);

            //Run the diff

            Document diffAsDom = xmlUtils.diffToDoc(doc,
                    doc1, new Options());
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }*/
}
